================================================================================
GUÍA COMPLETA DE DEPLOY EN SERVIDOR EXISTENTE - WAYGPS
================================================================================

FECHA: 2025-10-09
VERSIÓN: 1.0
SISTEMA: WayGPS Frontend + Backend Django

================================================================================
ÍNDICE
================================================================================

1. PREPARACIÓN EN PC LOCAL
2. ARCHIVOS DE CONFIGURACIÓN CREADOS
3. PASOS DE DEPLOY EN SERVIDOR
4. CONFIGURACIÓN DE NGINX
5. SERVICIO SYSTEMD
6. CONFIGURACIÓN DE BASE DE DATOS
7. VERIFICACIÓN Y TESTING
8. MONITOREO Y MANTENIMIENTO
9. SOLUCIÓN DE PROBLEMAS COMUNES
10. ANEXOS

================================================================================
1. PREPARACIÓN EN PC LOCAL
================================================================================

ANTES DE EMPEZAR:
- Tener servidor con Ubuntu/CentOS
- Base de datos PostgreSQL existente
- Acceso SSH al servidor
- Git configurado (opcional pero recomendado)

ARCHIVOS PREPARADOS:
✓ wayproject/settings_production.py  - Configuración Django para producción
✓ config_production.env             - Variables de entorno
✓ deploy.sh                         - Script de deploy automático
✓ nginx_waygps.conf                 - Configuración Nginx
✓ requirements.txt                  - Dependencias Python

================================================================================
2. ARCHIVOS DE CONFIGURACIÓN CREADOS
================================================================================

A) SETTINGS DE PRODUCCIÓN (wayproject/settings_production.py)
------------------------------------------------------------
- Configuración optimizada para servidor
- Logging configurado
- Seguridad habilitada
- Base de datos configurable via variables de entorno
- CORS configurado
- Archivos estáticos optimizados

B) VARIABLES DE ENTORNO (config_production.env)
-----------------------------------------------
DEBUG=False
SECRET_KEY=tu-clave-secreta-super-segura-cambiar-en-produccion
ALLOWED_HOSTS=tu-servidor.com,IP-del-servidor,localhost,127.0.0.1
DB_NAME=waygps
DB_USER=tu_usuario_db
DB_PASSWORD=tu_password_db
DB_HOST=localhost
DB_PORT=5432

C) SCRIPT DE DEPLOY (deploy.sh)
-------------------------------
- Instala dependencias automáticamente
- Ejecuta migraciones
- Recopila archivos estáticos
- Crea superusuario si no existe
- Configuración completa en un solo comando

D) CONFIGURACIÓN NGINX (nginx_waygps.conf)
------------------------------------------
- Proxy reverso para Django
- Manejo de archivos estáticos
- Configuración para puertos GPS
- Optimizaciones de caché
- Timeouts configurados

================================================================================
3. PASOS DE DEPLOY EN SERVIDOR
================================================================================

PASO 1: INSTALAR DEPENDENCIAS DEL SISTEMA
-----------------------------------------
```bash
# Ubuntu/Debian
sudo apt update
sudo apt install python3.11 python3.11-pip python3.11-venv nginx git

# CentOS/RHEL
sudo yum update
sudo yum install python311 python311-pip nginx git
```

PASO 2: SUBIR CÓDIGO AL SERVIDOR
--------------------------------
OPCIÓN A - Git (Recomendado):
```bash
# En el servidor
git clone https://github.com/tu-usuario/waygps.git
cd waygps
```

OPCIÓN B - SCP/SFTP:
```bash
# En tu PC
scp -r C:\desa\wayGps\app usuario@tu-servidor:/home/usuario/waygps/
```

PASO 3: CONFIGURAR ENTORNO VIRTUAL
----------------------------------
```bash
cd /ruta/a/tu/proyecto
python3.11 -m venv venv
source venv/bin/activate
pip install --upgrade pip
```

PASO 4: CONFIGURAR VARIABLES DE ENTORNO
---------------------------------------
```bash
# Copiar archivo de configuración
cp config_production.env .env

# Editar con datos reales de tu servidor
nano .env
```

DATOS QUE DEBES CAMBIAR EN .env:
- DB_NAME: Nombre de tu base de datos
- DB_USER: Usuario de PostgreSQL
- DB_PASSWORD: Password de PostgreSQL
- DB_HOST: IP del servidor de base de datos
- ALLOWED_HOSTS: Tu dominio o IP del servidor
- SECRET_KEY: Clave secreta única (generar nueva)

PASO 5: EJECUTAR DEPLOY
-----------------------
```bash
# Dar permisos de ejecución
chmod +x deploy.sh

# Ejecutar deploy
./deploy.sh
```

LO QUE HACE EL SCRIPT:
✓ Instala dependencias Python
✓ Ejecuta migraciones de base de datos
✓ Recopila archivos estáticos
✓ Crea superusuario (admin/admin123)
✓ Configura logs

================================================================================
4. CONFIGURACIÓN DE NGINX
================================================================================

PASO 1: COPIAR CONFIGURACIÓN
-----------------------------
```bash
sudo cp nginx_waygps.conf /etc/nginx/sites-available/waygps
```

PASO 2: EDITAR CONFIGURACIÓN
-----------------------------
```bash
sudo nano /etc/nginx/sites-available/waygps
```

CAMBIOS NECESARIOS:
- server_name: Cambiar por tu dominio o IP
- alias /static/: Ruta completa a staticfiles
- alias /media/: Ruta completa a media

EJEMPLO:
```nginx
server {
    listen 80;
    server_name misedominio.com;  # ← Cambiar aquí
    
    location /static/ {
        alias /home/usuario/waygps/staticfiles/;  # ← Cambiar aquí
    }
    
    location /media/ {
        alias /home/usuario/waygps/media/;  # ← Cambiar aquí
    }
}
```

PASO 3: ACTIVAR SITIO
---------------------
```bash
# Crear enlace simbólico
sudo ln -s /etc/nginx/sites-available/waygps /etc/nginx/sites-enabled/

# Verificar configuración
sudo nginx -t

# Si todo está bien, reiniciar
sudo systemctl restart nginx
sudo systemctl enable nginx
```

================================================================================
5. SERVICIO SYSTEMD
================================================================================

CREAR ARCHIVO DE SERVICIO:
```bash
sudo nano /etc/systemd/system/waygps.service
```

CONTENIDO:
```ini
[Unit]
Description=WayGPS Django Application
After=network.target

[Service]
User=tu_usuario
Group=tu_grupo
WorkingDirectory=/ruta/a/tu/proyecto
Environment="DJANGO_SETTINGS_MODULE=wayproject.settings_production"
ExecStart=/ruta/a/tu/proyecto/venv/bin/python manage.py runserver 0.0.0.0:8000
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
```

ACTIVAR SERVICIO:
```bash
sudo systemctl daemon-reload
sudo systemctl enable waygps
sudo systemctl start waygps
sudo systemctl status waygps
```

================================================================================
6. CONFIGURACIÓN DE BASE DE DATOS
================================================================================

VERIFICAR CONEXIÓN:
```bash
# Probar conexión a PostgreSQL
psql -h localhost -U tu_usuario -d tu_base_datos

# Si no funciona, verificar:
# 1. PostgreSQL está corriendo
sudo systemctl status postgresql

# 2. Usuario existe y tiene permisos
sudo -u postgres psql
\du
\q
```

CONFIGURAR POSTGRESQL (si es necesario):
```bash
# Crear usuario y base de datos
sudo -u postgres psql
CREATE USER waygps WITH PASSWORD 'tu_password';
CREATE DATABASE waygps OWNER waygps;
GRANT ALL PRIVILEGES ON DATABASE waygps TO waygps;
\q
```

INSTALAR EXTENSIÓN POSTGIS:
```bash
sudo -u postgres psql -d waygps -c "CREATE EXTENSION IF NOT EXISTS postgis;"
```

================================================================================
7. VERIFICACIÓN Y TESTING
================================================================================

VERIFICAR SERVICIO:
```bash
# Estado del servicio
sudo systemctl status waygps

# Ver logs en tiempo real
sudo journalctl -u waygps -f

# Verificar puerto
netstat -tlnp | grep :8000
```

VERIFICAR NGINX:
```bash
# Estado de Nginx
sudo systemctl status nginx

# Ver logs de Nginx
sudo tail -f /var/log/nginx/access.log
sudo tail -f /var/log/nginx/error.log

# Probar configuración
sudo nginx -t
```

TESTING DE LA APLICACIÓN:
```bash
# Probar localmente
curl http://localhost:8000/

# Probar desde fuera (si tienes dominio)
curl http://tu-dominio.com/

# Probar API
curl http://tu-dominio.com/api/moviles/
```

ACCESO WEB:
- URL: http://tu-servidor.com/
- Login: admin
- Password: admin123

================================================================================
8. MONITOREO Y MANTENIMIENTO
================================================================================

LOGS IMPORTANTES:
```bash
# Logs de Django
tail -f /ruta/a/tu/proyecto/logs/django.log

# Logs del sistema
sudo journalctl -u waygps -f

# Logs de Nginx
sudo tail -f /var/log/nginx/access.log
sudo tail -f /var/log/nginx/error.log

# Logs de PostgreSQL
sudo tail -f /var/log/postgresql/postgresql-*.log
```

COMANDOS ÚTILES:
```bash
# Reiniciar aplicación
sudo systemctl restart waygps

# Reiniciar Nginx
sudo systemctl restart nginx

# Ver procesos Python
ps aux | grep python

# Ver uso de memoria
free -h

# Ver espacio en disco
df -h
```

BACKUP AUTOMÁTICO:
```bash
# Crear script de backup
nano backup.sh
```

```bash
#!/bin/bash
# Backup de base de datos
pg_dump waygps > backup_$(date +%Y%m%d_%H%M%S).sql

# Backup de archivos estáticos
tar -czf static_backup_$(date +%Y%m%d_%H%M%S).tar.gz staticfiles/

# Limpiar backups antiguos (más de 30 días)
find . -name "backup_*.sql" -mtime +30 -delete
find . -name "static_backup_*.tar.gz" -mtime +30 -delete
```

```bash
chmod +x backup.sh

# Programar backup diario
crontab -e
# Agregar línea:
0 2 * * * /ruta/a/tu/proyecto/backup.sh
```

================================================================================
9. SOLUCIÓN DE PROBLEMAS COMUNES
================================================================================

PROBLEMA 1: Error 502 Bad Gateway
SOLUCIÓN:
- Verificar que Django esté corriendo: sudo systemctl status waygps
- Verificar puerto 8000: netstat -tlnp | grep :8000
- Revisar logs: sudo journalctl -u waygps -f

PROBLEMA 2: Error de base de datos
SOLUCIÓN:
- Verificar conexión: psql -h localhost -U usuario -d base_datos
- Verificar que PostgreSQL esté corriendo
- Revisar configuración en .env

PROBLEMA 3: Archivos estáticos no cargan
SOLUCIÓN:
- Verificar que collectstatic se ejecutó: ls -la staticfiles/
- Verificar permisos: sudo chown -R www-data:www-data staticfiles/
- Verificar configuración de Nginx

PROBLEMA 4: Error de permisos
SOLUCIÓN:
- Verificar propietario de archivos: ls -la
- Cambiar propietario: sudo chown -R usuario:grupo /ruta/proyecto
- Verificar permisos de logs: sudo chmod 755 logs/

PROBLEMA 5: Puerto 8000 ocupado
SOLUCIÓN:
- Verificar qué usa el puerto: sudo lsof -i :8000
- Cambiar puerto en configuración
- Matar proceso si es necesario: sudo kill -9 PID

PROBLEMA 6: Error de migraciones
SOLUCIÓN:
- Verificar base de datos existe
- Verificar usuario tiene permisos
- Ejecutar migraciones manualmente: python manage.py migrate

================================================================================
10. ANEXOS
================================================================================

A) COMANDOS ÚTILES DE DJANGO
----------------------------
```bash
# Crear migraciones
python manage.py makemigrations

# Aplicar migraciones
python manage.py migrate

# Crear superusuario
python manage.py createsuperuser

# Recopilar archivos estáticos
python manage.py collectstatic

# Shell de Django
python manage.py shell

# Verificar configuración
python manage.py check
```

B) COMANDOS DE POSTGRESQL
-------------------------
```bash
# Conectar a base de datos
psql -h localhost -U usuario -d base_datos

# Listar bases de datos
\l

# Listar tablas
\dt

# Describir tabla
\d nombre_tabla

# Salir
\q
```

C) COMANDOS DE NGINX
--------------------
```bash
# Verificar configuración
sudo nginx -t

# Recargar configuración
sudo nginx -s reload

# Reiniciar servicio
sudo systemctl restart nginx

# Ver estado
sudo systemctl status nginx
```

D) ESTRUCTURA DE ARCHIVOS FINAL
-------------------------------
```
/ruta/a/tu/proyecto/
├── manage.py
├── requirements.txt
├── .env
├── deploy.sh
├── logs/
│   └── django.log
├── staticfiles/
├── media/
├── venv/
├── wayproject/
│   ├── settings.py
│   ├── settings_production.py
│   └── urls.py
├── gps/
├── authentication/
├── templates/
└── static/
```

================================================================================
CHECKLIST FINAL
================================================================================

ANTES DE CONSIDERAR EL DEPLOY COMPLETO:

□ Servidor configurado y accesible
□ Base de datos PostgreSQL funcionando
□ Código subido al servidor
□ Entorno virtual creado y activado
□ Dependencias instaladas
□ Variables de entorno configuradas
□ Migraciones ejecutadas
□ Archivos estáticos recopilados
□ Nginx configurado y funcionando
□ Servicio systemd creado y activo
□ Aplicación accesible via web
□ Login funcionando (admin/admin123)
□ API respondiendo correctamente
□ Logs configurados y funcionando
□ Backup configurado
□ Monitoreo básico implementado

================================================================================
CONTACTO Y SOPORTE
================================================================================

Para problemas o dudas sobre el deploy:
1. Revisar logs primero
2. Verificar configuración
3. Consultar esta documentación
4. Verificar conectividad de red
5. Revisar permisos de archivos

COMANDOS DE DIAGNÓSTICO RÁPIDO:
```bash
# Estado general del sistema
sudo systemctl status waygps nginx postgresql

# Verificar puertos
netstat -tlnp | grep -E ":(80|8000|5432)"

# Verificar logs recientes
sudo journalctl -u waygps --since "1 hour ago"
sudo tail -20 /var/log/nginx/error.log
```

================================================================================
Fecha: 2025-10-09
Versión: 1.0
Sistema: WayGPS
================================================================================
